from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import asyncio
from dotenv import load_dotenv
import os
load_dotenv()  

class Form(StatesGroup):
    Question = State()
    QuestionFormName = State()
    NumberPhone = State()
    Task = State()
    Sroki = State()
    ReturnOtvet = State()
    ReturnOtvetQuestion = State()

MAIN_CARD_BUTTONS_VERICIT = [
    ("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ", "m_zakaz"),
    ("üë§ –ü—Ä—è–º–æ–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "m_admin"),
]

def main_card_keyboard_vericitify():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS_VERICIT:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

TOKEN = os.getenv('TOKEN') 

bot = Bot(token=TOKEN)
dp = Dispatcher()

ADMIN_ID = 5108832503

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    kb_vericitify = main_card_keyboard_vericitify()
    await message.answer(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=kb_vericitify,
        parse_mode=ParseMode.HTML
    )

@dp.message(Command(commands="send"))
async def send_answer(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            "<b>–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç?</b>\n"
            "<i>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å.</i>",
            parse_mode=ParseMode.HTML
        )
        await state.set_state(Form.ReturnOtvet)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.callback_query(F.data == "m_zakaz")
async def support_request(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:</b>",
        parse_mode=ParseMode.HTML
    )
    await call.answer()
    await state.set_state(Form.QuestionFormName)

@dp.callback_query(F.data == "m_admin")
async def admin_contact(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: <a href='https://t.me/DeltaOneLove'>@DeltaOneLove</a>",
        parse_mode=ParseMode.HTML
    )
    await call.answer()

MAIN_CARD_BUTTONS = [
    ("–•–æ—Å—Ç–∏–Ω–≥", "r_–•–æ—Å—Ç–∏–Ω–≥"),
    ("–¢–µ–ª–µ–≥—Ä–∞–º –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "r_–¢–µ–ª–µ–≥—Ä–∞–º–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
    ("–¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç", "r_–¢–µ–ª–µ–≥—Ä–∞–º–ë–æ—Ç"),
    ("2D –ò–Ω–¥–∏ –ò–≥—Ä–∞", "r_2D–ò–≥—Ä–∞–ò–Ω–¥–∏"),
    ("–ü–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "r_–ü–∫–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
    ("–ò–ò –ë–æ—Ç", "r_–ò–ò–±–æ—Ç"),
    ("–í–µ–± —Å–∞–π—Ç", "r_–í–µ–±–°–∞–π—Ç"),
    ("–°–∫—Ä–∏–ø—Ç", "r_–°–∫—Ä–∏–ø—Ç"),
]

@dp.message(Form.ReturnOtvet)
async def process_return_userid(message: Message, state: FSMContext):
    await state.update_data(usernameReturn=message.text.strip())
    await message.answer(
        "<b>–ß—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å?</b>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.ReturnOtvetQuestion)

@dp.message(Form.ReturnOtvetQuestion)
async def process_return_answer(message: Message, state: FSMContext):
    await state.update_data(ret=message.text.strip())

    data = await state.get_data()
    payload = {
        "ret": data["ret"],
        "usernameReturn": data["usernameReturn"]
    }

    await message.answer(
        "‚úÖ <b>–û—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω</b>",
        parse_mode=ParseMode.HTML
    )
    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://forward-alpha.vercel.app/api/forwardReturn", json=payload) as resp:
            if resp.status != 200:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

def main_card_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

@dp.message(Form.QuestionFormName)
async def process_question(message: Message, state: FSMContext):
    await state.update_data(question=message.text.strip())

    data = await state.get_data()
    payload = {
        "question": data["question"],
        "usernameID": message.from_user.id,
        "username": "@" + message.from_user.username or ""
    }

    await message.answer(
        "‚úÖ <b>–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–µ!</b>\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        parse_mode=ParseMode.HTML
    )
    await state.clear()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://forward-alpha.vercel.app/api/return", json=payload) as resp:
            if resp.status != 200:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
